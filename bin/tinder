#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0413


"tinder"


import os
import profile
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from tix.commands import Commands
from tix.cli      import CLI
from tix.default  import Default
from tix.errors   import Errors
from tix.event    import Event
from tix.log      import Logging
from tix.main     import modnames, scan
from tix.run      import broker
from tix.object   import Object, ident, keys
from tix.parse    import parse
from tix.persist  import Persist
from tix.run      import broker
from tix.thread   import launch
from tix.utils    import laps


from tix import modules
from tix import user as mods


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()
CLI.out   = print


Cfg         = Default()
Cfg.debug   = True
Cfg.mod     = ""
Cfg.name    = "tinder"
Cfg.silent  = False
Cfg.skip    = ["debug",]
Cfg.version = "13"
Cfg.wdr     = ".test"


Persist.workdir = Cfg.wdr


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dpl = ["hnrss title,url"]
param.fnd = ["log", "todo"]
param.imp = ["tests/feeds.opml"]
param.log = ["bla"]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews"]
param.pwd = ["bla mekker"]
param.rem = ["hnrss"]
param.res = [""]
param.tdo = ["mekker"]
param.ver = [""]


class CLII(CLI):

    def raw(self, txt):
        if "v" in Cfg.opts:
            print(txt)


def consume(evts):
    "wait for events."
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def payload(clt):
    "do payload."
    cmds = sorted(list(keys(Commands.cmds)))
    with paylock:
        nmr = 0
        for cmdd in cmds:
            for ex in getattr(param, cmdd, [""]):
                evt = Event()
                evt.channel = "#nixt"
                evt.orig = repr(clt)
                evt.txt = cmdd + " " + ex
                evt.type = "command"
                clt.put(evt)
                events.append(evt)
                nmr += 1
        return nmr


def wrap(func):
    "reset terminal."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    "main"
    Logging.out = Errors.out = print
    Cfg.dis = Cfg.sets.dis
    Cfg.mod = ",".join(modnames())
    if "v" in Cfg.opts:
        DTE = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        print(f'{DTE} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    scan(modules, Cfg.mod, Cfg.dis)
    scan(mods, Cfg.mod, Cfg.dis)
    nrs = Cfg.index or 1
    nrcommand = len(Commands.cmds) or 1
    thrs = []
    cli = CLII()
    cli.start()
    for _nr in range(nrs):
        thrs.append(launch(payload, cli))
    for thr in thrs:
        thr.join()
    consume(events)
    endtime = time.time()
    lap = laps(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "v" in Cfg.opts:
        print(f"{lap} {nrs} {nrcommand} {percall}")


if __name__ == "__main__":
    parse(Cfg, " ".join(sys.argv[1:]))
    if "f" in Cfg.opts:
        if os.path.exists(Persist.workdir):
            shutil.rmtree(Persist.workdir)
    if "p" in Cfg.opts:
        profile.runctx(main.__code__, globals(), locals())
    else:
        wrap(main)
    sys.exit()
